联合作战资源的再调度算法仿真
资源调度是联合作战中的一个重要环节，各种作战资源合理的编成将为作战任务的顺利完成提供保障。但是，在作战过程中，无法保证资源任何时刻都处于良好的状态，一旦资源无法使用将影响整个作战任务的完成。文章改进了多维动态列表（MDLS）算法并进行了仿真，使某些资源在无法使用时能够进行再调度以完成任务。

联合作战 作战资源 再调度 算法 仿真  

1问题描述
调度问题是如何在限定的时间内利用有限的资源
执行一组给定的动作「“。联合作战的资源调度是根据作
战任务和现有的可调用资源情况,对作战资源进行调度。
调度方案包括了任务开始时间、结束时间以及所分配
到的资源等信息““。联合作战中资源的调度是对各作战
资源进行合理的编成编组,使各作战资源发挥出最大的
作战效能。可以说,联合战场资源的调度是保证联合作
战任务完成的一大关键,它的一般流程如图!所示“。
在作战资源完成初始分配之后,由于在资源使用
过程中可能会出现突发的情况,如战斗损伤等,这就需
要对作战资源进行再调度以保证完成任务。
作战资源在作战过程中随时会面临战斗损伤,故障
以及其他情况,这些突发情况会导致资源暂时性或永久
性无法使用。一旦发生这种情况,原先资源所保障的作
战任务就无法顺利完成,因此需要对资源进行再调度。
图 1 作战资源的调度流程
Fig. 1 The flow chart of joint operation scheduling
资源状态是反映资源在当前时刻下是否能正常工
作的一个指标,也是作战资源再调度问题的一个基础,
通过资源状态这个指标可以判断资源是否可以满足任
务需求,是否需要进行再调度。在作战资源分配后,应
继续监视资源的状态,若资源一直运转良好,资源可以
完成现在的任务后进行释放,等待执行下一个任务;若
资源在执行任务过程中有突发的情况发生,任务进人
资源再分配流程,对资源进行重新调度。
为了便于监视资源的状态,本文将资源的状态分为
“可用““忙““不可用“3种情况,分别用数字1.0、-1
与之对应。其中,“可用“表示在当前时刻,资源处于空
闲状态,可以分配给任务;“忙“表示在当前时刻,资源已
经分配,无法分配给其他任务;“不可用“表示在当前时
刻,资源可能遇到突发情况,如故障、战斗损伤等导致无
法使用。当某个正在执行任务的资源中状态标识出现
了s=-1,表示资源出现了不可用的状况,该任务应该进
行资源再分配,才能够保证任务顺利完成。
2“改进的多维动态列表算法
作战资源调度问题已经被证明是一类NP-hard问
题““,解决这类问题一般使用启发式算法进行求解,多
维动态列表(MDLS)算法是一种求解作战资源调度的
算法,由Levchuk“1等人提出,文献[2,5-6]对算法进
行过改进,但改进的出发点大多集中于优化任务完成
时间和改进平台优先权。本文主要从资源状态改变进
行考虑,改进算法流程使其在资源出现突发情况时能
对资源进行再调度。
2.1原始的MDLS算法
原始的MDLS算法主要包括2个步骤:1)任务的
选择;2)平台资源的选择“。任务的选择是根据各种
优先权计算公式,计算出各个任务的优先权,然后按照
优先权的大小进行任务的安排和资源的分配,优先权
高的任务先分配资源并优先执行,优先权低的任务则
后执行。选定任务之后,算法进人平台资源选择阶段。
在这一阶段,平台根据优先权计算公式计算平台资源
的优先权,优先权较高的平台先分配给当前选定的任
务,选好平台后再进行平台裁剪,直到每一个平台对于
当前任务来说都是不可或缺的。
2.2“改进的MDLS算法
原始MDLS算法的一大特点是假设在整个作战任
务的任何时刻,所有的平台作战资源都是完好无损可
以调用的,每一次任务结束之后,所有该任务调用的
资源都释放返回可调用资源的集合,等待执行下一次
矛壬务.(〕
原始MDLS算法的弊端显而易见,作战资源在实
际作战过程中不可能时刻都保持在完好状态,总会受到
故障.战斗损伤的影响,一旦资源出现这些突发情况,算
法无法进行及时的调度处理,将会对任务的执行产生很
大影响;另一方面,作战过程中故障的资源可能通过抢
修后可以重新投人使用,因此应该及时检查故障资源是
否能够重新调用,以便使资源利用率最大化。
在平台资源模型中加入状态信息,在原始的MDLS
算法中加入故障资源判断以及已经开始执行的任务中
是否有任务需要资源再分配这两个步骤,每次时间更
新后,进行故障资源的判断:即在无法调用的资源集合
中查找是否有故障排除能够重新投人使用的资源,若
有则将其重新放入可调用的资源集合;再查看已经开
始执行的任务中是否有因为资源损毁或故障需要重新
进行资源调度的任务,若有则进行资源重新调度。
2.3“改进的MDLS算法流程
改进后的MDLS算法流程如图2所示。
就绪任务集合,即没有前序任务或前序任务都已经完
成的任务集合;TEMP为当前选定的任务集合;TEMP1
为已经开始执行的任务集合;FREE为可以调用的资
源集合;BROKEN为无法调用资源的集合,包括战斗损
毁资源和故障资源。
初始化阶段假设所有资源的状态都是良好的,都可
以调用,将状态标识置1。FREE集合中包含了所用资
源,没有前序任务的任务进人READY集合。
1)完成时间更新1。若已经分配的任务数等于整
个任务数,则结束程序;否则从TEMP1I中选择最接近
完成的任务进行更新操作,将其调用的平台都释放,重
新进人FREE,再观察该任务后续任务中是否有前序任
务已经全部完成的任务,若有,则将其添加进READY,
然后转入步骤2)。
2)故障资源状态判断。在时间更新后,在BROKEN
中逐个寻找是否有故障排除,即状态标识重新置1的资
源。若有,将这些资源添加入FREE中,用以之后任务
的调用。完成步骤2)后进人步骤3)。
3)已开始的任务是否需要资源再分配。在TEMP]
中查看已经开始的任务中执行任务的资源是否有出现
损毁或故障情况,即查看资源状态标识是否出现了被
置为-1的情况。若有,则该任务重新进人TEMP集
合,并在TEMP1!集合中将该任务删除并进人步骤6);
若没有则进人步骤4)。
4)分配可行性检测。检测FREE中的资源是否
能够满足至少一个READY中任务的执行。若不满足
返回步骤1);满足则进人步骤5)。
5)任务选择。若READY为空集合,则返回步骤
1);若READY不为空,则根据任务的优先权函数计算
出READY中各个任务的优先权,然后选择优先权最
大的任务进人TEMP,并将其从READY中删除,然后
进人步骤6)。
6)资源选择。根据步骤5)选定的任务,即TEMP
中的任务,在FREE中根据各资源的优先权函数计算
资源的优先权,并添加到处理任务的资源组,直到
TEMP中任务所需资源都得到满足,停止添加。资源
选择完成后进人步骤7)进行资源裁剪。
7)资源裁剪。在步骤6)中确定的资源组集合中
进行资源的裁剪,裁剪的方法是,若去掉某一个资源后
剩下的资源都能满足任务的资源需求,则把该资源裁
剪掉,否则保留该资源。裁剪后的资源组必须保证每
一个资源对于TEMP中的任务来说都是不可或缺的。
完成后进人步骤8)。
8〉》完成时间更新2。将被调用的资源从FREF中
删除,更新资源组中的每个资源最后执行的任务,将资
源组中每个资源的状态标识置0,并更新任务的开始
时间,输出资源分配方案包括任务代号、任务开始时
间、任务结束时间以及任务分配到的资源代号,然后返
回步骤3)再次循环操作。
3“仿真及结果
3.1“仿真设定
本文采用美军A2C2实验7一联合登岛作战实
验的数据进行仿真,该实验包含了18个任务,20个平
台资源“。
图 3 为作战任务图,图中显示了各作战任务时序
关系。任务属性表和资源属性表则分别包含了任务资
源需求和处理时间,资源名称、速度以及资源对应任务
各项需求的能力等信息,如表1\表2所示。
表 1 任务属性表
Table 1 Task attribute
佣杜"【友白誓氯源需′亘}更Te1。ert
Tt 50°3 100 0 00 0 0 6 30
2 G 一 40 0 0 0 0 6 30
T3 0 3 0 0 0 0 0 0 10
E 3. 0:0 0 0 10 0 10
TS 0 3 0 0 0 0 0 0 10
T6 0 0 0 10 14 12 0 0 10
T7 0 0 0 10 14 12 0 0 10
T8 0 0 0 10 14 12 0 0 10
TO 5 0 0 0 0 5 0 0 10
T10 5 0 0 0 0 5 0 0 10
Tit 0 0 0 0 0 10 5 0 10
TI12. 0 0 0 0 0 10 5 0 10
T13 0 0 0 0 0 8 0 6 20
T14 0 0 0 0 0 8 0 6 20
TiS 0.0 6 20 10 4 0 0 15
Ti6 0 0 0. 20 10 4 0 0 15
T17 0 0 0 0 0 8 0 4 10
Ti8 0 0 0 8 6 0 4 10 20
表 2 资源属性表
Table 2 Resource parameters
1 DDGC 0 10 1 0 9 5 0 0 2
2 FFG 1 4 10 0 4 3 0 0 2
3 CC Ww 10 1 0 9 5 0 0 2
4 ENG 0 0 0 2 0 0 5 0 4
6 SD 5 0 0 0 0 0 “ 0 “ 0 4
7 AHL 3 4 0 0 6 10 1 0 4
8 - CAS1 1 3 0 0 10 8 1 0 4
9 CAS2 1 3 0 0 10 8 1 0 4
10 CAS3 1 3 0 0 100 8 1 0 4
14 SMC 0 0 0 0 0 0 10 0 2
15 TARP 0 0 0 0 co 0 0 +6 5
16 SAT 0 06 0 0 0 0 0 6 7
实验采用VC++6.0平台进行仿真,仿真计算机
CPU主频1.6GHz。仿真步长的设定值从理论上说应
尽可能小,因为对资源的状态监视总是期望是实时的,
一旦资源状态出现变化,可以尽可能早地做出反应。在
这里设定仿真步长为0.001h,实验中平台优先权算式
采用文献[4]中的万。
式中:8(m,i)为平台m所提供的能满足任务;的各类
资源的总和;Bx(m)为平台m对READY集合中任务
的资源满足程度。
式中,sm为对某类资源士平台m能提供给任务1资源i
的数量,任务!所需资源的数量为。
采用R是因为其计算较为简便,不涉及平台移动
等情况,可以较快输出结果,便于观察再调度情况。
实验中任务优先权的计算采用加权长度计算方
法,任务优先权算式为
2 CD)
式中:Oour(办为任务7的后续任务集;C。(加为任务7
的关键路径,等于任务7到任务流程结束时所需要的
最短时间“1;Co()为任务7的后续任务集合Oour(1)
中的任务7的关键路径。
3.2“仿真结果
在假设资源全部正常的情况下,输出仿真结果,如
表 3 所示。
表 3 资源正常情况下的调度方案
. Table 3 Scheduling result when all the resources are available
任务代号“开始时间h“结柬时间/h,分配平台
Tl 0 30 P1 P2 P15
T3 0 10 Pi1 P12 P13
T4 0 10 P3
TS 0 10 P7 P14
T6 0 10 P8 P18 P
T17 0 10 P9 Pi6
T2 60. 150 90. 150 P3 P16 P2
7 30 40 P20 P8 P10
T18 30 50 P17 P4
T8 40 50 P9 P18 P19
T 65.805 75. 805 P1
T11 40 50 P7 P14
T13 89. 885 109. 885 P1 P11 P12 P13 P15
T12 75. 806 85.806 P10 P8 P4
Ti0 90. 150 100. 150 Po P6
T14 100.150 120. 150 P7 P17
T15 109. 886 124. 886 P20 PS P10
Ti6 120. 150 135.150 Pi8 P19 P9
为了测试算法的再调度模块,假设在t=35h时刻
资源P4发生了故障而不可用,程序输出再调度方案,
如表4所示。
表 4 资源P4在f=35h阡刻发生故障生成的再调度方室
, Table 4 Rescheduling result when resource
P4 is unavailable at r=35 h
任务代号“开始时间/hA“结丛时间/h分配平台
T1 0 30 Pt P2 P15
T3 0 10 P11 P12 P13
T4 0 10 P3
T5 0 10 P7 P14
T6 0 10 P8 P18 PS
T17 0 10 P9 P16
T2 60. 150 90. 150 P3 P16 P2
T7 30 40 P20 P8 P10
T18 30 50 P17 P4
资源P4发生故障进行再调度
T18 41. 605 61. 605 P? P9 P17 P19
T8 42. 500 52.500 P8 P5 P18
T9 65. 805 75.805 P1
T11 60.859 70. 859 P20 P10 P14
T12 97.785 107.785 P5 P8 P14
T10 90. 150 100. 150 P7 P6
Ti4 100. 150 120. 150 P9 P17
T15 109. 886 124.886 Pi0 P20 P19
T16 ? 121.298 136.298 PS P18 P3
从仿真结果来看,程序在资源发生故障之后可以重
新输出资源的再调度方案,再调度方案仍然以满足任务
的需求为目标,调用在当前FREE中的资源重新开始执
行被中断的任务。任务TI8需求r=8、rs=6、“=4和
ry,=10在P4不史用后,调用PP、P17P193个资源仍然
可以满足任务执行的要求。从仿真结果来看,某一正在
执行的任务的资源若发生故障或其他不可用的情况,
在资源数量有限的情况下,将会推迟整个作战任务的
完成时间,也会影响到后续其他任务的资源调用。
在实际作战过程中,作战资源分布在各个区域,可
建立战场资源属性数据库“1,数据库包含了作战资源
的各种信息,对分布式战场资源进行管埋。在资源发
生不可用情况时,资源属性数据库的状态信息发生变
化,通过数据链,可以实现不同军兵种资源状态信息的
传输“,这些信息汇总到一个指挥点后,再通过相应的
算法即可输出再调度的方案。
4“统束语
本文通过改进MDLS算法流程,在作战资源出现
不可用情况下可生成再调度方案。但是改进的MDLS
算法无法估量故障资源执行的任务完成情况,现在的
再调度方案都是让任务重新开始执行,这势必会造成
作战资源的浪费,延长整个作战任务的完成时间。实
际作战过程中,战圣资源都是分布在各个区域的,现在
的仿真只是在单一平台上进行,下一步应努力实现分
布式的作战资源再调度。此外,现在的仿真都是建立
在任务既定的基础之上,所有设定任务的属性都是固
定不变的,但是在实际作战过程中,战斗情况瞳息万
变,各任务随着时间的推移对资源的需求也在变化中,
而在一些特殊情况下,紧急任务的插人也会造成资源
需要重新调度,因此,如何在动态变化的情况下实现资
源的再调度是下一步重点研究的方向。
